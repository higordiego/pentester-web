from flask import Flask, request, jsonify, send_from_directory
from flask_jwt_extended import JWTManager, create_access_token, jwt_required
import mysql.connector

from flask_swagger_ui import get_swaggerui_blueprint
from datetime import timedelta
import os

app = Flask(__name__)

SWAGGER_URL="/swagger"
API_URL="/static/swagger.json"

swagger_ui_blueprint = get_swaggerui_blueprint(
    SWAGGER_URL,
    API_URL,
    config={
        'app_name': 'Access API'
    }
)

app.register_blueprint(swagger_ui_blueprint, url_prefix=SWAGGER_URL)

# Configurações do banco de dados
db_config = {
    'host': 'localhost',
    'user': 'root',
    'password': 'toor',
    'database': 'security'
}

# Configuração do JWT
app.config['JWT_SECRET_KEY'] = '16f237faf903a49a3e6b7a5261fc3ac4289ffb4634df4adbe07501469fd57c9c5a6b154a4fe3c5ed51fd21a31c1132d1e14a19f269b1851bb42cad005e4c26c7'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(minutes=15) 
jwt = JWTManager(app)



@app.route('/docs/<path:path>')
def send_report(path):
    uploads = os.path.join(app.root_path, 'docs')
    return send_from_directory(uploads, path)

# Rota de autenticação
@app.route('/authenticate', methods=['POST'])
def autenticar_usuario():
    dados = request.get_json()

    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)

    query  = "select * from users where email = '{}' and password = md5('{}') limit 1".format(dados['email'], dados['password'])

    cursor.execute(query)
    user = cursor.fetchone()

    cursor.close()
    conn.close()
    
    if user:
        # Gera um token JWT
        access_token = create_access_token(identity={'user': user['id'], 'role': user['role']})
        return jsonify({ 'access_token': access_token, 'user': { 'id': user['id'], 'email': user['email'], 'role': 'admin' }})
    else:
        return jsonify({'mensagem': 'Credenciais inválidas'}), 401

# Rota para receber um parâmetro "id" (protegida por JWT)
@app.route('/user/<id>', methods=['GET'])
@jwt_required()
def obter_usuario(id):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)

    cursor.execute('SELECT id, name, email, password FROM users WHERE id = %s', (id,))
    usuario = cursor.fetchone()

    cursor.close()
    conn.close()

    if usuario:
        return jsonify({'id': usuario['id'], 'name': usuario['name'], 'email': usuario['email']})
    else:
        return jsonify({'mensagem': 'Usuário não encontrado'}), 404

@app.route('/user', methods=['GET'])
# @jwt_required()
def list_users():
    ## criar uma validação se o usuário existe.
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("SELECT id, name, email, password FROM users where role <> 'super'")
    usuario = cursor.fetchall()

    cursor.close()
    conn.close()

    if usuario:
        return jsonify({'data':  usuario })
    else:
        return jsonify({}), 204



# Rota para criar um usuário e gerar token JWT
@app.route('/user', methods=['POST'])
def criar_usuario():
    try:
        dados = request.get_json()

        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        cursor.execute("INSERT INTO users (name, email, password, role) VALUES (%s, %s, md5(%s), 'admin')", (dados['name'], dados['email'], dados['password'],))
        conn.commit()

        cursor.close()
        conn.close()
        return jsonify({}), 201
    except:
        return jsonify({'message': 'Usuário existente!'}), 400
    
    
if __name__ == '__main__':

    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()

    cursor.close()
    conn.close()

    from waitress import serve
    serve(app, host='0.0.0.0', port=3000)
